"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/hpadcfPbkUj
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import {
  deleteStory,
  getPublicStories,
  getStories,
  updateStoryPublish,
} from "@/app/actions";
import {
  PublicStoryDescription,
  PublicStoryFilter,
  StoryDescription,
} from "@/app/models/models";
import { Button } from "@/components/ui/button";
import { getStoryGenres, responseHaveError, isBlank } from "@/lib/utils";
import { SelectTrigger } from "@radix-ui/react-select";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import { LoadingComponent } from "./loading-component";
import PublicStoryCardComponent from "./public-story-card-component";
import StoryCardComponent from "./story-card-component";
import {
  DelayedSelect,
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectValue,
} from "./ui/select";
import "/node_modules/flag-icons/css/flag-icons.min.css";
import { SearchIcon } from "lucide-react";
const isoCountriesLanguages = require("iso-countries-languages");

const PAGE_SIZE = 10;

interface Props {
  dict: any;
  lang: string;
}

export function HomeComponent({ dict, lang }: Props) {
  const router = useRouter();

  const [authError, setAuthError] = useState(false);
  const [stories, setStories] = useState<StoryDescription[]>();
  const [publicStories, setPublicStories] =
    useState<PublicStoryDescription[]>();
  const [filterPublicLang, setFilterPublicLang] = useState<string | null>(null);
  const [filterPublicGenre, setFilterPublicGenre] = useState<string | null>(
    null
  );
  const [publicCurrentPage, setPublicCurrentPage] = useState(0);

  const currentLanguage = isoCountriesLanguages.getLanguage(lang, lang);
  const allLanguages = isoCountriesLanguages.getSupportedLangs() as string[];

  const genres = getStoryGenres();

  async function init() {
    const stories = await getStories();
    if (responseHaveError(stories, setAuthError)) {
      return;
    }
    setStories(stories as StoryDescription[]);
    await updatePublicStories();
  }

  async function updatePublicStories() {
    const filter: PublicStoryFilter = {
      lang: filterPublicLang,
      genre: filterPublicGenre,
    };
    const publicStories = await getPublicStories(filter);
    setPublicStories(publicStories as PublicStoryDescription[]);
    setPublicCurrentPage(0);
  }

  useEffect(() => {
    init();
  }, []);

  useEffect(() => {
    if (authError) {
      router.replace("/login");
    }
  }, [authError, router]);

  async function removeStory(id: string) {
    const newStories = stories!.filter((story) => story.id !== id);
    setStories(newStories);
    await deleteStory(id);
  }

  if (!stories) {
    return (
      <LoadingComponent
        title={dict["home.loading.title"]}
        message={dict["home.loading.message"]}
      />
    );
  }

  async function updateStory(id: string, value: boolean) {
    const newStories = stories!.map((story) => {
      if (story.id === id) {
        return { ...story, public: value };
      }
      return story;
    });
    setStories(newStories);
    await updateStoryPublish(id, value);
  }

  return (
    <div className="flex flex-col h-screen">
      <header className="bg-primary text-primary-foreground py-4 px-6 flex justify-between items-center">
        <h1 className="text-2xl font-bold">{dict["home.stories"]}</h1>
        <div className="flex items-center gap-4">
          <DelayedSelect onValueChange={(e: any) => router.replace(`/${e as string}`)}>
            <SelectTrigger>
              <span className={`fi fi-${lang}`}></span>
              <span className="ml-2">{currentLanguage}</span>
            </SelectTrigger>
            <SelectContent>
              <SelectGroup>
                {allLanguages.map((l) => (
                  <SelectItem value={l} key={l}>
                    <div className="flex items-center">
                      <span className={`fi fi-${l}`}></span>
                      <span className="ml-2">
                        {isBlank(isoCountriesLanguages.getLanguage(lang, l))
                          ? l
                          : isoCountriesLanguages.getLanguage(lang, l)}
                      </span>
                    </div>
                  </SelectItem>
                ))}
              </SelectGroup>
            </SelectContent>
          </DelayedSelect>
          <Button
            variant="ghost"
            className="rounded-full"
            onClick={() => router.replace(`${lang}/logout`)}
          >
            <span>{dict["home.button.logout"]}</span>
          </Button>
        </div>
      </header>
      <main className="flex-1 overflow-y-auto p-6">
        <div className="mb-6 flex justify-end">
          <Button
            variant="outline"
            className="inline-flex items-center gap-2 rounded-md px-4 py-2 text-sm font-medium transition-colors hover:bg-primary hover:text-primary-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2"
            onClick={() => router.push(`${lang}/create-story`)}
          >
            <PlusIcon className="w-5 h-5" />
            <span>{dict["home.button.newStory"]}</span>
          </Button>
        </div>
        <div className="mb-6">
          <h2 className="text-xl font-bold mb-2">{dict["home.stories"]}</h2>
          {stories.length === 0 && (
            <div className="flex flex-col items-center justify-center h-full">
              <div className="text-center space-y-4">
                <h2 className="text-2xl font-bold">
                  {dict["home.noStories.header"]}
                </h2>
                <p className="text-muted-foreground">
                  {dict["home.noStories.desc"]}
                </p>
                <Button
                  variant="outline"
                  className="inline-flex items-center gap-2 rounded-md px-4 py-2 text-sm font-medium transition-colors hover:bg-primary hover:text-primary-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2"
                  onClick={() => router.push(`${lang}/create-story`)}
                >
                  <PlusIcon className="w-5 h-5" />
                  <span>{dict["home.button.newStory"]}</span>
                </Button>
              </div>
            </div>
          )}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {stories.map((story) => (
              <StoryCardComponent
                key={story.id}
                dict={dict}
                lang={lang}
                story={story}
                callbackRemoveStory={removeStory}
                callbackUpdateStory={updateStory}
              />
            ))}
          </div>
        </div>
        <div className="mb-6">
          <h2 className="text-xl font-bold mb-2">
            {dict["home.public.stories"]}
          </h2>

          <div className="max-w my-8">
            <div className="bg-secondary rounded-lg shadow p-6">
              <h2 className="text-2xl font-bold mb-4">Filtro</h2>
              <div className="grid grid-cols-3 gap-4">
                <div>
                  <label
                    htmlFor="genre"
                    className="block text-sm font-medium text-foreground"
                  >
                    {dict["story.genre"]}
                  </label>
                  <DelayedSelect onValueChange={(e: any) => setFilterPublicGenre(e)}>
                    <SelectTrigger>
                      <SelectValue placeholder={dict["story.genre"]} />
                    </SelectTrigger>
                    <SelectContent>
                      {genres.map((g) => (
                        <SelectItem key={g} value={g}>
                          {dict[`story.genre.${g}`]}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </DelayedSelect>
                </div>
                <div>
                  <label
                    htmlFor="language"
                    className="block text-sm font-medium text-foreground"
                  >
                    {dict["story.lang"]}
                  </label>
                  <DelayedSelect onValueChange={(e: any) => setFilterPublicLang(e)}>
                    <SelectTrigger>
                      <SelectValue placeholder={dict["story.lang"]} />
                    </SelectTrigger>
                    <SelectContent>
                      {allLanguages.map((l) => (
                        <SelectItem key={l} value={l}>
                          {isBlank(isoCountriesLanguages.getLanguage(lang, l))
                            ? l
                            : isoCountriesLanguages.getLanguage(lang, l)}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </DelayedSelect>
                </div>
                <div>
                  <Button
                    variant="outline"
                    className="inline-flex items-center gap-2 rounded-md px-4 py-2 text-sm font-medium transition-colors hover:bg-primary hover:text-primary-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2"
                    onClick={() => updatePublicStories()}
                  >
                    <SearchIcon className="w-5 h-5" />
                    <span>{dict["home.button.search"]}</span>
                  </Button>
                </div>
              </div>
            </div>
          </div>

          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {publicStories?.map((story) => (
              <PublicStoryCardComponent
                key={story.id}
                dict={dict}
                lang={lang}
                story={story}
              />
            ))}
          </div>
        </div>
      </main>
    </div>
  );
}

function PlusIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  );
}
